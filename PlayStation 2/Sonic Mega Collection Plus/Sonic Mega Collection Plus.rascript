// Sonic Mega Collection Plus
// #ID = 20255

// $307EC4: Sonic 3 & Knuckles: Music ID (8-bit)
//          Angel Island Zone Act 1 - 0x65
//          Angel Island Zone Act 2 - 0x66
//          Hydrocity Zone Act 1 - 0x67
//          Hydrocity Zone Act 2 - 0x68
//          Marble Garden Zone Act 1 - 0x69
//          Marble Garden Zone Act 2 - 0x6a
//          Carnival Night Zone Act 1 - 0x6b
//          Carnival Night Zone Act 2 - 0x6c
//          Flying Battery Zone Act 1 - 0x6d
//          Flying Battery Zone Act 2 - 0x6e
//          Icecap Zone Act 1 - 0x6f
//          Icecap Zone Act 2 - 0x70
//          Launch Base Zone Act 1 - 0x71
//          Launch Base Zone Act 2 - 0x72
//          Mushroom Hill Zone Act 1 - 0x73
//          Mushroom Hill Zone Act 2 - 0x74
//          Sandopolis Zone Act 1 - 0x75
//          Sandopolis Zone Act 2 - 0x76
//          Lava Reef Zone Act 1 - 0x77
//          Lava Reef Zone Act 2 - 0x78
//          Sky Sanctuary Zone - 0x79
//          Deathegg Zone Act 1 - 0x7a
//          Deathegg Zone Act 2 - 0x7b
//          Sonic & Knuckles Boss - 0x7c
//          Major Boss Theme - 0x7d
//          Doomsday Zone - 0x7e
//          Bonus Stage - 0x7f
//          Blue Spheres - 0x80
//          Bonus Stage 2 - 0x81
//          Bonus Stage 3 - 0x82
//          Knuckles Theme - 0x83
//          Azure Lake - 0x84
//          Balloon Park - 0x85
//          Desert Palace - 0x86
//          Chrome Gadget - 0x87
//          Endless Mine - 0x88
//          Title Screen - 0x89
//          Credits - 0x8a
//          Game/Time Over- 0x8b
//          No Way! - 0x8c
//          Level Complete Sound - 0x8d
//          1UP Sound - 0x8e
//          Chaos Emerald Sound - 0x8f
//          Super Theme - 0x90
//          Competition Theme - 0x91
//          Minor Boss Theme - 0x92
//          Save/Level Select - 0x93
//          Final Boss Theme - 0x94
//          Underwater Timer - 0x95
//          Ending - 0x96
//          Credits - 0x97
// $308BDA: [8-bit] FF = Level Select Code Entered
// $45269C: Player 1 Buttons Held This Frame (Inverted) [8-bit flags]
//          bit0: Select
//          bit1: L3
//          bit2: R3
//          bit3: Start
//          bit4: Up
//          bit5: Right
//          bit6: Down
//          bit7: Left
// $45269D: Player 1 Buttons Held This Frame Part 2 (Inverted) [8-bit flags]
//          bit0: L2
//          bit1: R2
//          bit2: L1
//          bit3: R1
//          bit4: Triangle
//          bit5: Circle
//          bit6: X
//          bit7: Square
// $45269E: Right Analogue Stick [16-bit]
// $4526A0: Left Analogue Stick [16-bit]
// $EEC001: [Sonic The Hedgehog 3] [8-bit] Grand Prix Player 1 Map 1 Minutes
// $EEC002: [Sonic The Hedgehog 3] [8-bit] Grand Prix Player 1 Map 1 Seconds
// $EEC003: [Sonic The Hedgehog 3] [8-bit] Grand Prix Player 1 Map 1 Milleseconds
// $EEC005: [Sonic The Hedgehog 3] [8-bit] Grand Prix Player 1 Map 2 Minutes
// $EEC006: [Sonic The Hedgehog 3] [8-bit] Grand Prix Player 1 Map 2 Seconds
// $EEC007: [Sonic The Hedgehog 3] [8-bit] Grand Prix Player 1 Map 2 Milleseconds
// $EEC009: [Sonic The Hedgehog 3] [8-bit] Grand Prix Player 1 Map 3 Minutes
// $EEC00A: [Sonic The Hedgehog 3] [8-bit] Grand Prix Player 1 Map 3 Seconds
// $EEC00B: [Sonic The Hedgehog 3] [8-bit] Grand Prix Player 1 Map 3 Milleseconds
// $EEC00D: [Sonic The Hedgehog 3] [8-bit] Grand Prix Player 1 Map 4 Minutes
// $EEC00E: [Sonic The Hedgehog 3] [8-bit] Grand Prix Player 1 Map 4 Seconds
// $EEC00F: [Sonic The Hedgehog 3] [8-bit] Grand Prix Player 1 Map 4 Milleseconds
// $EEC011: [Sonic The Hedgehog 3] [8-bit] Grand Prix Player 1 Map 5 Minutes
// $EEC012: [Sonic The Hedgehog 3] [8-bit] Grand Prix Player 1 Map 5 Seconds
// $EEC013: [Sonic The Hedgehog 3] [8-bit] Grand Prix Player 1 Map 5 Milleseconds
// $EEC015: [Sonic The Hedgehog 3] [8-bit] Grand Prix Player 2 Map 1 Minutes
// $EEC016: [Sonic The Hedgehog 3] [8-bit] Grand Prix Player 2 Map 1 Seconds
// $EEC017: [Sonic The Hedgehog 3] [8-bit] Grand Prix Player 2 Map 1 Milleseconds
// $EEC019: [Sonic The Hedgehog 3] [8-bit] Grand Prix Player 2 Map 2 Minutes
// $EEC01A: [Sonic The Hedgehog 3] [8-bit] Grand Prix Player 2 Map 2 Seconds
// $EEC01B: [Sonic The Hedgehog 3] [8-bit] Grand Prix Player 2 Map 2 Milleseconds
// $EEC01D: [Sonic The Hedgehog 3] [8-bit] Grand Prix Player 2 Map 3 Minutes
// $EEC01E: [Sonic The Hedgehog 3] [8-bit] Grand Prix Player 2 Map 3 Seconds
// $EEC01F: [Sonic The Hedgehog 3] [8-bit] Grand Prix Player 2 Map 3 Milleseconds
// $EEC021: [Sonic The Hedgehog 3] [8-bit] Grand Prix Player 2 Map 4 Minutes
// $EEC022: [Sonic The Hedgehog 3] [8-bit] Grand Prix Player 2 Map 4 Seconds
// $EEC023: [Sonic The Hedgehog 3] [8-bit] Grand Prix Player 2 Map 4 Milleseconds
// $EEC025: [Sonic The Hedgehog 3] [8-bit] Grand Prix Player 2 Map 5 Minutes
// $EEC026: [Sonic The Hedgehog 3] [8-bit] Grand Prix Player 2 Map 5 Seconds
// $EEC027: [Sonic The Hedgehog 3] [8-bit] Grand Prix Player 2 Map 5 Milleseconds
// $EEC029: [Sonic The Hedgehog 3] [8-bit] Time Trial Lap 1 Minutes
// $EEC02A: [Sonic The Hedgehog 3] [8-bit] Time Trial Lap 1 Seconds
// $EEC02B: [Sonic The Hedgehog 3] [8-bit] Time Trial Lap 1 Milleseconds
// $EEC02D: [Sonic The Hedgehog 3] [8-bit] Time Trial Lap 2 Minutes
// $EEC02E: [Sonic The Hedgehog 3] [8-bit] Time Trial Lap 2 Seconds
// $EEC02F: [Sonic The Hedgehog 3] [8-bit] Time Trial Lap 2 Milleseconds
// $EEC031: [Sonic The Hedgehog 3] [8-bit] Time Trial Lap 3 Minutes
// $EEC032: [Sonic The Hedgehog 3] [8-bit] Time Trial Lap 3 Seconds
// $EEC033: [Sonic The Hedgehog 3] [8-bit] Time Trial Lap 3 Milleseconds
// $EEC035: [Sonic The Hedgehog 3] [8-bit] Time Trial Lap 4 Minutes
// $EEC036: [Sonic The Hedgehog 3] [8-bit] Time Trial Lap 4 Seconds
// $EEC037: [Sonic The Hedgehog 3] [8-bit] Time Trial Lap 4 Milleseconds
// $EEC039: [Sonic The Hedgehog 3] [8-bit] Time Trial Lap 5 Minutes
// $EEC03A: [Sonic The Hedgehog 3] [8-bit] Time Trial Lap 5 Seconds
// $EEC03B: [Sonic The Hedgehog 3] [8-bit] Time Trial Lap 5 Milleseconds
// $EEC03D: [Sonic The Hedgehog 3] [8-bit] Time Trial Total Minutes
// $EEC03E: [Sonic The Hedgehog 3] [8-bit] Time Trial Total Seconds
// $EEC03F: [Sonic The Hedgehog 3] [8-bit] Time Trial Total Milleseconds
// $EEF810: Sonic 3 & Knuckles: Main Character X coords (16-bit BE)
// $EEF814: Sonic 3 & Knuckles: Main Character Y coords (16-bit BE)
// $EEF821: [8-bit] Knuckles in Sonic 2: Is Knuckles Gliding?
//          
//          00 = No
//          01 = Gliding
//          02 = Gliding End
//          
//          Sonic 3 & Knuckles: Main Character State (8-bit)
//          death - 0x18
//          hurt - 0x1a
// $EEF828: [Sonic the Hedgehog 2] [8-bit]
//          Player 1 Sonic's/Tails' Remaining Air
// $EEF82A: State of the main character in Sonic 3 & Knuckles (8-bit)
//          bit0 - looking left
//          bit1 - in air
//          bit2 - ball form
//          bit3 - standing on object
//          bit4 - jumping while rolling
//          bit5 - pushing
//          bit6 - underwater
// $EEF82B: [Sonic the Hedgehog 2]
//          Current Flag
//          Bit0 = Shield
//          Bit1 = Invincibility
//          Bit2 = Speed Shoes
//          
//          [Sonic & Knuckles, 3]
//          Bit0 = Shield (combines with Bit4, Bit5, or Bit6)
//          Bit1 = Invincibility
//          Bit2 = Speed Shoes
//          Bit4 = Fire Shield effect
//          Bit5 = Lightning Shield effect
//          Bit6 = Water Shield effect
// $EEF82C: [Sonic the Hedgehog 3] [8-bit]
//          Player 1 Sonic's/Tails' Remaining Air
// $EEF82E: Sonic 3 & Knuckles: Act Clear Check (8-bit)
//          Clear - 0x81
// $EEF82F: Sonic 3 & Knuckles: Main Character Special State (8-bit)
//          hasn't used Special - 0x00
//          Special active - 0x01
//          Special used - 0x02
// $EEF840: Sonic 3 & Knuckles: Main Character Jump State (8-bit)
//          no jump - 0x00
//          jumped - 0x01
// $EEF842: Sonic 3 & Knuckles: Pointer to the last object main character stood on (16-bit BE)
//          +0x00ee4801 |  Object Start (8-bit)
//          +0x00ee4810 | X coords (16-bit BE)
//          +0x00ee4814 | Y coords (16-bit BE)
//          +0x00ee4822 | Animation Number (8-bit)
//          +0x00ee4823 | Animation Frame (8-bit)
//          +0x00ee482a | Object Status (8-bit)
//          bit0 - X Orientation
//          bit1 - Y Orientatiom
//          bit2 - unused
//          bit3 - Sonic standing on object
//          bit4 - Tails standing on object
//          bit5 - pushed by Sonic
//          bit6 - pushed by Tails
//          bit7 - unused
//          +0x00ee4830 | Object Intensity (8-bit)
//          +0x00ee4832 | Object Subtype (8-bit)
// $EEF85A: Sonic 3 & Knuckles: Second Character X coords (16-bit BE)
// $EEF85E: Sonic 3 & Knuckles: Second Character Y coords (16-bit BE)
// $EEF868: [Sonic the Hedgehog 2] [8-bit]
//          Player 2 Tails' Remaining Air
// $EEF876: [Sonic the Hedgehog 3] [8-bit]
//          Player 1 Tails' Remaining Air
// $EF2B82: [S&K] Pointer to Boss Health (among other things?) [16-bit BE]
//          +0x00ee4829
//          
//          MH1 Boss: 0x06 to 0x00
//          MH2 Boss: 0x09 to 0x01
//          FB2 Boss: 0x08 to 0x00
//          SP2 Boss: 0x08 to 0x00
//          LR1 Boss (Hand): 0x06 to 0x00
//          LR2 Boss: 0x0e to 0x00
//          Sonic SS Boss 1: 0x08 to 0x00
//          Sonic SS Boss 2: 0x08 to 0x00
//          Sonic SS Boss 3: 0x08 to 0x00
//          Knuckles SS Boss (Phase 1): 0x08 to 0x00
//          Knuckles SS Boss (Phase 2): 0x08 to 0x00
//          DE2 Gravity Boss: 0x08 to 0x00
//          DE2 Final Boss (Laser Phase): 0x08 to 0x00
//          Doesn't apply to others
//          Not well-tested
// $EF2C31: [Sonic The Hedgehog 3] Blue Sphere Game Start
//          0x00 = Not Started
//          0x01 = Started
// $EF2C38: [Blue Sphere] [16-bits]
//          Blue Spheres Left
// $EF2C3A: [Sonic The Hedgehog 3] [16-bit BE] Blue Sphere Rings Collected
// $EF2C3E: [Blue Sphere] [16-bits]
//          Timer to Speed up
// $EF2C42: [Blue Sphere] [16-bits]
//          Rings Left
// $EF2C44: [Blue Sphere]
//          Current Speed
// $EF2C4C: [Blue Sphere]
//          Goes from 01 to 04 when beating the level
// $EF2E01: [Sonic The Hedgehog 3] [8-bit] Azure Lake Record First Place Minutes
// $EF2E02: [Sonic The Hedgehog 3] [8-bit] Azure Lake Record First Place Seconds
// $EF2E03: [Sonic The Hedgehog 3] [8-bit] Azure Lake Record First Place Milliseconds
// $EF2E05: [Sonic The Hedgehog 3] [8-bit] Azure Lake Record Second Place Minutes
// $EF2E06: [Sonic The Hedgehog 3] [8-bit] Azure Lake Record Second Place Seconds
// $EF2E07: [Sonic The Hedgehog 3] [8-bit] Azure Lake Record Second Place Milliseconds
// $EF2E09: [Sonic The Hedgehog 3] [8-bit] Azure Lake Record Third Place Minutes
// $EF2E0A: [Sonic The Hedgehog 3] [8-bit] Azure Lake Record Third Place Seconds
// $EF2E0B: [Sonic The Hedgehog 3] [8-bit] Azure Lake Record Third Place Milleseconds
// $EF2E11: [Sonic The Hedgehog 3] [8-bit] Balloon Park Record First Place Minutes
// $EF2E12: [Sonic The Hedgehog 3] [8-bit] Balloon Park Record First Place Seconds
// $EF2E13: [Sonic The Hedgehog 3] [8-bit] Balloon Park Record First Place Milleseconds
// $EF2E15: [Sonic The Hedgehog 3] [8-bit] Balloon Park Record Second Place Minutes
// $EF2E16: [Sonic The Hedgehog 3] [8-bit] Balloon Park Record Second Place Seconds
// $EF2E17: [Sonic The Hedgehog 3] [8-bit] Balloon Park Record Second Place Milleseconds
// $EF2E19: [Sonic The Hedgehog 3] [8-bit] Balloon Park Record Third Place Minutes
// $EF2E1A: [Sonic The Hedgehog 3] [8-bit] Balloon Park Record Third Place Seconds
// $EF2E1B: [Sonic The Hedgehog 3] [8-bit] Balloon Park Record Third Place Milleseconds
// $EF2E21: [Sonic The Hedgehog 3] [8-bit] Desert Palace Record First Place Minutes
// $EF2E22: [Sonic The Hedgehog 3] [8-bit] Desert Palace Record First Place Seconds
// $EF2E23: [Sonic The Hedgehog 3] [8-bit] Desert Palace Record First Place Milleseconds
// $EF2E25: [Sonic The Hedgehog 3] [8-bit] Desert Palace Record Second Place Minutes
// $EF2E26: [Sonic The Hedgehog 3] [8-bit] Desert Palace Record Second Place Seconds
// $EF2E27: [Sonic The Hedgehog 3] [8-bit] Desert Palace Record Second Place Milleseconds
// $EF2E29: [Sonic The Hedgehog 3] [8-bit] Desert Palace Record Third Place Minutes
// $EF2E2A: [Sonic The Hedgehog 3] [8-bit] Desert Palace Record Third Place Seconds
// $EF2E2B: [Sonic The Hedgehog 3] [8-bit] Desert Palace Record Third Place Milleseconds
// $EF2E31: [Sonic The Hedgehog 3] [8-bit] Chrome Gadget Record First Place Minutes
// $EF2E32: [Sonic The Hedgehog 3] [8-bit] Chrome Gadget Record First Place Seconds
// $EF2E33: [Sonic The Hedgehog 3] [8-bit] Chrome Gadget Record First Place Milleseconds
// $EF2E35: [Sonic The Hedgehog 3] [8-bit] Chrome Gadget Record Second Place Minutes
// $EF2E36: [Sonic The Hedgehog 3] [8-bit] Chrome Gadget Record Second Place Seconds
// $EF2E37: [Sonic The Hedgehog 3] [8-bit] Chrome Gadget Record Second Place Milleseconds
// $EF2E39: [Sonic The Hedgehog 3] [8-bit] Chrome Gadget Record Third Place Minutes
// $EF2E3A: [Sonic The Hedgehog 3] [8-bit] Chrome Gadget Record Third Place Seconds
// $EF2E3B: [Sonic The Hedgehog 3] [8-bit] Chrome Gadget Record Third Place Milleseconds
// $EF2E41: [Sonic The Hedgehog 3] [8-bit] Endless Mine Record First Place Minutes
// $EF2E42: [Sonic The Hedgehog 3] [8-bit] Endless Mine Record First Place Seconds
// $EF2E43: [Sonic The Hedgehog 3] [8-bit] Endless Mine Record First Place Milleseconds
// $EF2E45: [Sonic The Hedgehog 3] [8-bit] Endless Mine Record Second Place Minutes
// $EF2E46: [Sonic The Hedgehog 3] [8-bit] Endless Mine Record Second Place Seconds
// $EF2E47: [Sonic The Hedgehog 3] [8-bit] Endless Mine Record Second Place Milleseconds
// $EF2E49: [Sonic The Hedgehog 3] [8-bit] Endless Mine Record Third Place Minutes
// $EF2E4A: [Sonic The Hedgehog 3] [8-bit] Endless Mine Record Third Place Seconds
// $EF2E4B: [Sonic The Hedgehog 3] [8-bit] Endless Mine Record Third Place Milleseconds
// $EF2E60: [Sonic 3&K] Which Save Slot? [32-bit pointer]
//          0x00000000: No Save
//          0xffffe6ac: Slot 1
//          0xffffe6b6: Slot 2
//          0xffffe6c0: Slot 3
//          0xffffe6ca: Slot 4
//          0xffffe6d4: Slot 5
//          0xffffe6de: Slot 6
//          0xffffe6e8: Slot 7
//          0xffffe6f2: Slot 8
// $EF2EAC: [S3&K] All Save Slot Data [84 bytes]
// $EF2EB8: [Sonic The Hedgehog 3] Save Slot [32-bit]
//          0x00000000 = No Save
//          0xffffe6cc = Slot 1
//          0xffffe6d4 = Slot 2
//          0xffffe6dc = Slot 3
//          0xffffe6e4 = Slot 4
//          0xffffe6ec = Slot 5
//          0xffffe6f4  = Slot 6
// $EF2F00: [S3&K] Ring Status Table [1024 bytes]
//          Any ring that hasn't been collected yet starts as 0x0000. Picking it up eventually turns it to 0xffff.
// $EF3300: [S3&K] Object Respawn Table [768 bytes]
//          There is room for one object per byte, but not all slots are used in each act.
// $EF333E: [S&K] SS Life Monitor 2 [8-bit]
// $EF3365: [S&K] LR1 Life Monitor [8-bit]
//          Knuckles route
// $EF3366: [S&K] SP1 Life Monitor [8-bit]
//          Knuckles only
// $EF338F: [S&K] FB2 Life Monitor [8-bit]
// $EF339B: [S&K] LR1 Life Monitor 1 [8-bit]
//          Sonic route
// $EF339C: [S&K] SS Life Monitor 1 [8-bit]
// $EF33AD: [S&K] FB1 Life Monitor 1 [8-bit]
// $EF33B6: [S&K] DE2 Life Monitor 1 [8-bit]
// $EF33BE: [S&K] LR1 Life Monitor 2 [8-bit]
// $EF33ED: [S&K] LR1 Life Monitor 4 [8-bit]
//          Sonic route
// $EF3401: [S&K] SP2 Life Monitor [8-bit]
// $EF340B: [S&K] DE2 Life Monitor 2 [8-bit]
// $EF3437: [S&K] FB1 Life Monitor 2 [8-bit]
// $EF3438: [S&K] MH1 Life Monitor 1 [8-bit]
//          0x80 -> 0x81
// $EF347B: [S&K] LR1 Life Monitor 3 [8-bit]
// $EF34E4: [S&K] MH2 Life Monitor [8-bit]
// $EF350F: [S&K] MH1 Life Monitor 2 [8-bit]
// $EF3600: [Sonic the Hedgehog 2] [16-bit]
//          Camera X Position
// $EF3604: [Sonic the Hedgehog 2] [16-bit]
//          Camera Y Position
// $EF364E: Sonic 3 & Knuckles: current Level ID (8-bit)
//          Angel Island Zone - 0x00
//          Hydrocity Zone - 0x01
//          Marble Garden Zone - 0x02
//          Carnival Night Zone - 0x03
//          Flying Battery Zone - 0x04
//          Icecap Zone - 0x05
//          Launch Base Zone - 0x06
//          Mushroom Hill Zone - 0x07
//          Sandopolis Zone - 0x08
//          Lava Reef Zone - 0x09
//          Lava Reef Zone Act 2 Boss Room & Hidden Palace Zone - 0x16
//          Sky Sanctuary Zone - 0x0a
//          Death Egg Zone - 0x0b
//          The Doomsday Zone (Super Sonic) - 0x0c
//          The Doomsday Zone (Death Egg Robot) & Hidden Palace (Emeralds) - 0x17
//          Credits - 0x0d
//          Bonus Stage (Gumball Machine) - 0x13
//          Bonus Stage - 0x14
//          Bonus Stage (Slot Machine) - 0x15
// $EF364F: Sonic 3 & Knuckles: current Act ID (8-bit)
// $EF3678: Sonic 3 & Knuckles: Camera X coords (16-bit BE)
// $EF367C: Sonic 3 & Knuckles: Camera Y coords (16-bit BE)
// $EF3680: [Sonic the Hedgehog 3] [16-bit]
//          Camera X Position
// $EF3684: [Sonic the Hedgehog 3] [16-bit]
//          Camera Y Position
// $EF3699: [Sonic The Hedgehog 3] [8-bit] Grand Prix Player 1 Total Minutes
// $EF369A: [Sonic The Hedgehog 3] [8-bit] Grand Prix Player 1 Total Seconds
// $EF369B: [Sonic The Hedgehog 3] [8-bit] Grand Prix Player 1 Total Milleseconds
// $EF36B4: Sonic 3 & Knuckles: Background X coords (32-bit BE)
// $EF3748: [Sonic The Hedgehog 3] [8-bit] Competition Game Mode Selected
//          0x00 = Grandprix
//          0x01 = Match Race
//          0x02 = Time Attack
//          0x03 = Exit
// $EF374A: [Sonic The Hedgehog 3] [8-bit] Competition Track
//          0x00 = Azure Lake
//          0x01 = Balloon Park
//          0x02 = Chrome Gadget
//          0x03 = Desert Palace
//          0x04 = Endless Mine
// $EF374B: [Sonic The Hedgehog 3] [8-bit] Save Selection
//          0x00 = No Save
//          0x01 - 0x06 = Save Files
//          0x07 = Delete Save
// $EF374E: [Sonic The Hedgehog 3] [8-bit] Completitive Icon Enabled / Disabled
//          0x00 = Enabled
//          0xff = Disabled
// $EF3E00: [Sonic the Hedgehog (Genesis), 2, 3] [8-bit]
//          Screen Mode
//          0x00 = Splash Screen
//          0x04 = Title Menu or Stage Select
//          0x8c = Stage Transition
//          0x0c = In Game or Game Over
//          0x10 = Special Stage
//          
//          Sonic 2
//          0x20 = Ending
//          
//          Sonic 3
//          0x20 = Ending
//          0x34 = Special Stage
//          0x38 = Competition
//          0x44 = Grand Prix Results
//          0x48 = Special Stage Result
//          0x4c = Save File Select
//          0x8c = Transition
//          0xc0 = Time Trial Screen
//          
//          Sonic 3 & Knuckles:
//          Start Screen - 0x04
//          File Select - 0x4c
//          Level Select - 0x28
//          Competition Mode - 0x38
//          Grand Prix - 0x3c
//          Match Race - 0x40
//          Time Attack - 0xc0
//          Race Results - 0x50
//          Win/Lose Screen - 0x44
//          Sonic 2 Options Menu (unused) - 0x24
//          Sonic 2 2-Player Mode (unused) - 0x1c
//          Demo Mode - 0x08
//          Special Stage - 0x34
//          No Way! - 0x2c
//          Staff Credits - 0x20
//          Ingame - 0x0c
//          Screen Transition - 0x8c
//          Score Tally Special Stage - 0x48
//          
//          Knuckes in Sonic 2:
//          0x00 = Sega Logo
//          0x04 = Title Screen
//          0x08 = Demo
//          0x8c = Screen Transition
//          0x0c = In-Game
// $EF3E34: Sonic 3 & Knuckles : Sandopolis Zone Act 2 Darkness Level Time (16-bit BE)
// $EF3E3B: [Sonic & Knuckles, 3] Game Paused [8-bit]
//          0x00 = Not Paused
//          0x01 = Paused
// $EF3FAC: [8-bit] Knuckles in Sonic 2: Is Knuckles Gliding?
//          
//          00 = No
//          02 = Yes
// $EF3FC3: Sonic 3 & Knuckles: Sandopolis Zone Act 2 Darkness Level (8-bit)
// $EF3FD1: [Sonic the Hedgehog (Genesis)] [8-bit]
//          Marble Zone Block Combo
// $EF411E: [Sonic the Hedgehog (Genesis)] [8-bit]
//          Sonic Aliveness Flag
//          
//          01 - alive
//          00 - not alive
// $EF4407: Monitor Flag
//          [Sonic the Hedgehog (Genesis), 2]
// $EF440B: Monitor Flag
//          [Sonic the Hedgehog 2]
//          Wing Fortress Zone First Life Monitor
//          [Knuckles in Sonic 2]
//          Chemical Plant Zone Act 2 Third Life Monitor
//          Hill Top Zone Act 2 Life Monitor
// $EF440C: Monitor Flag
//          [Knuckles in Sonic 2]]
//          Chemical Plant Zone Act 2 Fourth Life Monitor
// $EF440F: Monitor Flag
//          [Sonic the Hedgehog 2]
//          Chemical Plant Zone Act 2 First Life Monitor
// $EF4410: Monitor Flag
//          [Sonic the Hedgehog (Genesis)]
//          Star Light Zone Act 1 Life Monitor
// $EF4411: Monitor Flag
//          [Knuckles in Sonic 2]]
//          Chemical Plant Zone Act 2 First Life Monitor
// $EF441A: Monitor Flag
//          [Sonic the Hedgehog 2]
//          Emerald Hill Act 2 First Life Monitor
// $EF441E: Monitor Flag
//          [Sonic the Hedgehog (Genesis)]
//          Marble Zone Act 2 Life Monitor
//          Labyrinth Zone Act 3 Life Monitor
// $EF4420: Monitor Flag
//          [Sonic the Hedgehog 2]
//          Mystic Cave Act 1 Life Monitor
// $EF4422: Monitor Flag
//          [Sonic the Hedgehog (Genesis)]
//          Star Light Zone Act 3 Life Monitor
//          
//          [Sonic the Hedgehog 2]
//          Aquatic Ruin Act 1 Life Monitor
// $EF4424: Monitor Flag
//          [Sonic the Hedgehog (Genesis)]
//          Marble Zone Act 3 Life Monitor
//          
//          [Sonic the Hedgehog 2]
//          Oil Ocean Zone Act 2 Life Monitor
// $EF4425: Monitor Flag
//          [Sonic the Hedgehog 2]
//          Chemical Plant Zone Act 1 First Life Monitor
//          Oil Ocean Zone Act 1 Life Monitor
//          Metropolis Zone Act 3 Life Monitor
// $EF4426: Monitor Flag
//          [Sonic the Hedgehog 2]
//          Emerald Hill Act 1 Life Monitor
//          Chemical Plant Zone Act 2 Second Life Monitor
//          
//          [Knuckles in Sonic 2]]
//          Chemical Plant Zone Act 1 Fiveth Life Monitor
// $EF4427: Monitor Flag
//          [Sonic the Hedgehog 2]
//          Metropolis Zone Act 2 Life Monitor
// $EF4429: Monitor Flag
//          [Knuckles in Sonic 2]]
//          Chemical Plant Zone Act 2 Second Life Monitor
// $EF442A: Monitor Flag
//          [Sonic the Hedgehog (Genesis)]
//          Marble Zone Act 1 Life Monitor
// $EF442C: Monitor Flag
//          [Sonic the Hedgehog 2]
//          Emerald Hill Act 2 Second Life Monitor
// $EF442E: Monitor Flag
//          [Sonic the Hedgehog (Genesis)]
//          Spring Yard Zone Act 1 Life Monitor
// $EF4430: Monitor Flag
//          [Knuckles in Sonic 2]]
//          Chemical Plant Zone Act 1 Second Life Monitor
// $EF4431: Monitor Flag
//          [Sonic the Hedgehog 2]
//          Casino Night Act 2 Life Monitor
// $EF4432: Monitor Flag
//          [Knuckles in Sonic 2]]
//          Chemical Plant Zone Act 1 Third Life Monitor
// $EF4439: Monitor Flag
//          [Sonic the Hedgehog 2]
//          Wing Fortress Zone Second Life Monitor
//          [Knuckles in Sonic 2]
//          Chemical Plant Zone Act 1 Fourth Life Monitor
// $EF443F: Monitor Flag
//          [Sonic the Hedgehog 2]]
//          Wing Fortress Zone Third Life Monitor
// $EF4440: Monitor Flag
//          [Sonic the Hedgehog (Genesis)]
//          Star Light Zone Act 2 Life Monitor
//          
//          [Sonic the Hedgehog 2]
//          Aquatic Ruin Act 2 Second Life Monitor
// $EF4445: Monitor Flag
//          [Sonic the Hedgehog 2]
//          Aquatic Ruin Act 2 First Life Monitor
// $EF4448: Monitor Flag
//          [Sonic the Hedgehog (Genesis)]
//          Green Hill Zone Act 2 Life Monitor
// $EF444C: Monitor Flag
//          [Sonic the Hedgehog 2]
//          Casino Night Act 1 Life Monitor
// $EF4465: Monitor Flag
//          [Sonic the Hedgehog (Genesis)]
//          Spring Yard Zone Act 2 Life Monitor
// $EF4475: Monitor Flag
//          [Sonic the Hedgehog (Genesis)]
//          Green Hill Zone Act 3 Life Monitor
// $EF45C5: [Sonic The Hedgehog 3] [8-bit] Save Load Timer
// $EF45EB: [Sonic The Hedgehog 3] [8-bit] Zone Selection Save File
//          0x00 - 0x06 = Zones
//          0xff = Clear / Non-Save / New Save
// $EF45EC: [Sonic The Hedgehog 3] [32-bit] Save File
//          0x00000000 = No Save
//          0xffff00b0 = New Save
//          0xffffe6cc = Slot 1
//          0xffffe6d4 = Slot 2
//          0xffffe6dc = Slot 3
//          0xffffe6e4 = Slot 4
//          0xffffe6ec = Slot 5
//          0xffffe6f4  = Slot 6
// $EF4603: [Sonic The Hedgehog 3] Load From Last Checkpoint
//          0x00 = No
//          0x01 = Yes
// $EF4604: [Sonic The Hedgehog 3] [16-bit BE] Current Level Time in Frames
//          
//          Ristar - Password Cheats 1 [Bitcount]
//          [Bit-0] = Onchi Music mode and credit's music in sound test
//          [Bit-2] = Stage Select
//          [Bit-3] = True Sight (lets you see hidden items)
//          [Bit-6] = Boss Rush Mode
// $EF460C: [Sonic The Hedgehog 3] [32-bit BE] Play Time in Frames
// $EF4610: Current Stage [8-bit]
//          Sonic the Hedgehog (Genesis)
//          0x00 = Green Hill Zone
//          0x01 = Labyrinth Zone/Scrap Brain Zone act 3
//          0x02 = Marble Zone
//          0x03 = Star Light Zone
//          0x04 = Spring Yard Zone
//          0x05 = Scrap Brain Zone/Final Zone
//          0x06 = Ending
//          
//          Sonic the Hedgehog 2
//          0x00 = Emerald Hill Zone
//          0x04 = Metropolis Zone
//          0x05 = Metropolis Zone Act 3
//          0x06 = Wing Fortress Zone
//          0x07 = Hill Top Zone
//          0x0A = Oil Ocean Zone
//          0x0B = Mystic Cave Zone
//          0x0C = Casino Night Zone
//          0x0D = Chemical Plant Zone
//          0x0E = Death Egg Zone
//          0x0F = Aquatic Ruin Zone
//          0x10 = Sky Chase Zone
//          
//          Sonic The Hedgehog 3
//          0x00 = Angel Island
//          0x01 = Hydrocity
//          0x02 = Marble Garden
//          0x03 = Carnival Night
//          0x04 = Flying Battery
//          0x05 = Icecap
//          0x06 = Launch Base
//          0x07 = Mushroom Valley
//          0x08 = Sandopolis
//          0x0e = Azure Lake
//          0x0f = Balloon Park
//          0x10 = Desert Palace
//          0x11 = Chrome Gadget
//          0x12 = Endless Mine
//          0x13 = Bonus Stage Gumball
//          
//          Sonic 3 & Knuckles:
//          Angel Island Zone - 0x00
//          Hydrocity Zone - 0x01
//          Marble Garden Zone - 0x02
//          Carnival Night Zone - 0x03
//          Flying Battery Zone - 0x04
//          Icecap Zone - 0x05
//          Launch Base Zone - 0x06
//          Mushroom Hill Zone - 0x07
//          Sandopolis Zone - 0x08
//          Lava Reef Zone - 0x09
//          Lava Reef Zone Act 2 Boss Room & Hidden Palace Zone - 0x16
//          Sky Sanctuary Zone - 0x0a
//          Death Egg Zone - 0x0b
//          The Doomsday Zone (Super Sonic) - 0x0c
//          The Doomsday Zone (Death Egg Robot) & Hidden Palace (Emeralds) - 0x17
//          Credits - 0x0d
//          Bonus Stage (Gumball Machine) - 0x13
//          Bonus Stage - 0x14
//          Bonus Stage (Slot Machine) - 0x15
//          Azure Lake - 0x0e
//          Balloon Park - 0x0f
//          Chrome Gadget - 0x11
//          Desert Palace - 0x10
//          Endless Mine - 0x12
// $EF4611: [Sonic the Hedgehog (Genesis), 2, 3] [8-bit]
//          Current Act
// $EF4612: [Sonic the Hedgehog (Genesis), 2, 3] [8-bit]
//          Number of Lives
// $EF4615: [Sonic the Hedgehog (Genesis)] [8-bit]
//          Remaining Air
// $EF4616: [Sonic the Hedgehog (Genesis), 2, 3] [8-bit] - Lewis50248
//          Current Special Stage
//          
//          Ristar - Stage 1-1 Stats [Bitcount]
//          [Bit-0] = Treasure obtained (Bonus Stage)
//          [Bit-1] = Currently on Stage
//          [Bit-2] = No death bonus (stays on unless if you die in stage)
//          [Bit-3] = Stage has been reached
// $EF4618: Sonic the Hedgehog 2 - Continues - Delmaru
//          
//          Ristar - Stage 1 Boss Stats [Bitcount]
//          [Bit-1] = Currently on Stage (stays after you beat the stage)
//          [Bit-2] = No death bonus (stays on unless if you die in stage)
//          [Bit-3] = Stage has been reached
// $EF4619: [Sonic the Hedgehog 2, 3] [8-bit]
//          Super Sonic = 0x01
//          
//          Ristar - Stage 2-1 Stats [Bitcount]
//          [Bit-0] = Treasure obtained (Bonus Stage)
//          [Bit-1] = Currently on Stage
//          [Bit-2] = No death bonus (stays on unless if you die in stage)
//          [Bit-3] = Stage has been reached
// $EF461E: [Sonic the Hedgehog (Genesis), 2, 3] [8-bit] - Lewis50248
//          Act Completed = 0x00
//          
//          Ristar - Stage 3 Boss Stats [Bitcount]
//          [Bit-1] = Currently on Stage (stays after you beat the stage)
//          [Bit-2] = No death bonus (stays on unless if you die in stage)
//          [Bit-3] = Stage has been reached
// $EF4620: [Sonic the Hedgehog 1(Genesis), 2, 3] [16-bit BE] - Delmaru
//          Ring counter
//          
//          Ristar - Stage 4-2 Stats [Bitcount]
//          [Bit-0] = Treasure obtained (Bonus Stage)
//          [Bit-1] = Currently on Stage
//          [Bit-2] = No death bonus (stays on unless if you die in stage)
//          [Bit-3] = Stage has been reached
// $EF4623: [Sonic the Hedgehog (Genesis), 2, 3] [8-bit] - ThatAmericanSlacker
//          Game Time: Game Time: Mins [Hex]
//          
//          Also true for Knuckles in Sonic 2
//          
//          Ristar - Stage 5-2 Stats [Bitcount]
//          [Bit-0] = Treasure obtained (Bonus Stage)
//          [Bit-1] = Currently on Stage
//          [Bit-2] = No death bonus (stays on unless if you die in stage)
//          [Bit-3] = Stage has been reached
// $EF4624: [Sonic the Hedgehog (Genesis), 2, 3] [8-bit] - ThatAmericanSlacker
//          Game Time: Secs [Hex]
//          
//          Also true for Knuckles in Sonic 2
//          
//          Ristar - Stage 5 Boss Stats [Bitcount]
//          [Bit-1] = Currently on Stage (stays after you beat the stage)
//          [Bit-2] = No death bonus (stays on unless if you die in stage)
//          [Bit-3] = Stage has been reached
// $EF4625: [Sonic the Hedgehog (Genesis), 2, 3] [8-bit] - ThatAmericanSlacker
//          Game Time: Milisecs [Hex]
//          
//          Also true for Knuckles in Sonic 2
//          
//          Ristar - Stage 6-1 Stats [Bitcount]
//          [Bit-0] = Treasure obtained (Bonus Stage)
//          [Bit-1] = Currently on Stage
//          [Bit-2] = No death bonus (stays on unless if you die in stage)
//          [Bit-3] = Stage has been reached
// $EF4626: Sonic Mega Drive Trilogie: Current Score (32-bit BE) - DarkyAndreas
//          
//          Ristar - Stage 6-2 Stats [Bitcount]
//          [Bit-0] = Treasure obtained (Bonus Stage)
//          [Bit-1] = Currently on Stage
//          [Bit-2] = No death bonus (stays on unless if you die in stage)
//          [Bit-3] = Stage has been reached
// $EF462A: Sonic 3 & Knuckles: last activated Checkpoint (8-bit) - DarkyAndreas
//          
//          Ristar - Last Boss Stats [Bitcount]
//          [Bit-1] = Currently on Stage
//          [Bit-2] = No death bonus (stays on unless if you die in stage)
//          [Bit-3] = Stage has been reached (stays after you beat the stage)
// $EF462C: [Sonic the Hedgehog (Genesis)] [8-bit]
//          Shield Flag
//          
//          Sonic 3 & Knuckles: backend loaded Level ID (8-bit)
// $EF462D: [Sonic the Hedgehog (Genesis)] [8-bit]
//          Invinsibility Flag
//          
//          Sonic 3 & Knuckles: backend loaded Act ID (8-bit)
// $EF462E: [Sonic the Hedgehog (Genesis)] [8-bit]
//          Speed Shoes Flag
// $EF4630: [Sonic the Hedgehog (Genesis)] [8-bit]
//          Checkpoint reached in current Act
// $EF4657: [Sonic the Hedgehog (Genesis)] [8-bit]
//          Number of Chaos Emeralds
// $EF46CC: Sonic 3 & Knuckles: Monitors destroyed in Stage (16-bit BE)
// $EF46DC: Sonic 3 & Knuckles: Competition Mode current Lap (8-bit)
// $EF4704: Sonic 3 & Knuckles: Rings left in the Stage (16-bit BE)
// $EF4708: [Knuckles in Sonic 2] [8-bit]
//          Stage Select Active = 01
// $EF4709: [Knuckles in Sonic 2] [8-bit]
//          Slow / Single Frame Step Mode Active = 01
//          
//          Sonic 3 & Knuckles: current Character (8-bit)
//          Sonic & Tails - 0x00
//          Sonic - 0x01
//          Tails - 0x02
//          Knuckles - 0x03
// $EF470B: [Blue Sphere]
//          Current Character
//          0x01 = Sonic
//          0x03 = Knuckles
//          
//          [Sonic The Hedgehog 3]
//          0x00 = Sonic + Tails
//          0x01 = Sonic Only
//          0x02 = Tails Only
//          
//          [Sonic 3 & Knuckles] Level Layout (takes hghest priority)
//          Sonic & Tails - 0x00
//          Sonic - 0x01
//          Tails - 0x02
//          Knuckles - 0x03
// $EF4710: [Sonic the Hedgehog (Genesis)] [16-bit]
//          Camera X Position
// $EF4714: [Sonic the Hedgehog (Genesis)] [16-bit]
//          Camera Y Position
// $EF4773: [Sonic the Hedgehog 2] [8-bit]
//          Current Character
//          0x00 = Sonic and Tails
//          0x01 = Sonic Alone
//          0x02 = Tails Alone
// $EF4783: [Sonic The Hedgehog 3] [8-bit] Sound Test Option
// $EF4785: [Sonic The Hedgehog 3] [8-bit] Sound Test Song
// $EF4786: [Sonic The Hedgehog 3] [8-bit] Game Mode
//          0x00 = Player 1
//          0x01 = Competitive
//          0x02 = Sound Test
// $EF479A: Sonic 3 & Knuckles: actual Level ID (8-bit)
//          Angel Island Zone - 0x00
//          Hydrocity Zone - 0x01
//          Marble Garden Zone - 0x02
//          Carnival Night Zone - 0x03
//          Flying Battery Zone - 0x04
//          Icecap Zone - 0x05
//          Launch Base Zone - 0x06
//          Mushroom Hill Zone - 0x07
//          Sandopolis Zone - 0x08
//          Lava Reef Zone - 0x09
//          Lava Reef Zone Act 2 Boss Room & Hidden Palace Zone - 0x16
//          Sky Sanctuary Zone - 0x0a
//          Death Egg Zone - 0x0b
//          The Doomsday Zone (Super Sonic) - 0x0c
//          The Doomsday Zone (Death Egg Robot) & Hidden Palace (Emeralds) - 0x17
//          Credits - 0x0d
// $EF47A6: [Blue Sphere] [32-bits]
//          Current Stages
// $EF47A7: [Blue Sphere] [24-bits]
//          Current Stages
// $EF47A8: [Blue Sphere] [16-bits]
//          Current Stages
// $EF47A9: [Blue Sphere] [8-bits]
//          Current Stages
// $EF47AA: [Blue Sphere]
//          Current Cursor Location
//          0x00 = Level
//          0x01 = Start
//          0x02 = Code
// $EF47AC: [Blue Sphere]
//          Difficulty in results screen
// $EF47AD: [Blue Sphere]
//          Current Max Difficulty in results screen
// $EF47B0: [Sonic 3 & Knuckles] [8-bit]
//          Number of Chaos Emeralds
// $EF47B1: [Sonic the Hedgehog 2, 3] [8-bit]
//          Number of Chaos Emeralds
//          
//          [Sonic 3 & Knuckles]
//          Number of Super Emeralds
// $EF47B2: Sonic 3 & Knuckles: Green Chaos Emerald (8-bit)
//          not collected - 0x00
//          collected - 0x01
//          transformed to Super Chaos Emerald - 0x02
//          Super Chaos Emerald collected - 0x03
// $EF47B3: Sonic 3 & Knuckles: Orange Chaos Emerald (8-bit)
//          not collected - 0x00
//          collected - 0x01
//          transformed to Super Chaos Emerald - 0x02
//          Super Chaos Emerald collected - 0x03
// $EF47B4: Sonic 3 & Knuckles: Purple Chaos Emerald (8-bit)
//          not collected - 0x00
//          collected - 0x01
//          transformed to Super Chaos Emerald - 0x02
//          Super Chaos Emerald collected - 0x03
// $EF47B5: Sonic 3 & Knuckles: Blue Chaos Emerald (8-bit)
//          not collected - 0x00
//          collected - 0x01
//          transformed to Super Chaos Emerald - 0x02
//          Super Chaos Emerald collected - 0x03
// $EF47B6: Sonic 3 & Knuckles: White Chaos Emerald (8-bit)
//          not collected - 0x00
//          collected - 0x01
//          transformed to Super Chaos Emerald - 0x02
//          Super Chaos Emerald collected - 0x03
// $EF47B7: Sonic 3 & Knuckles: Red Chaos Emerald (8-bit)
//          not collected - 0x00
//          collected - 0x01
//          transformed to Super Chaos Emerald - 0x02
//          Super Chaos Emerald collected - 0x03
// $EF47B8: Sonic 3 & Knuckles: Turquoise Chaos Emerald (8-bit)
//          not collected - 0x00
//          collected - 0x01
//          transformed to Super Chaos Emerald - 0x02
//          Super Chaos Emerald collected - 0x03
// $EF47BB: Sonic 3 & Knuckles: current Special Stage (8-bit)
//          Sonic 3 - 0x00
//          Sonic & Knuckles - 0x01
// $EF47D0: [Sonic the Hedgehog 2, 3] [8-bit] Stage Select
//          0x00 = Disabled
//          0x01 = Enabled
// $EF47D1: [Sonic the Hedgehog 2, 3] [8-bit]Slow / Single Frame Step Mode
//          0x00 = Disabled
//          0x01 = Enabled
// $EF47D2: [Sonic the Hedgehog 2, 3] [8-bit] Debug Mode
//          0x00 = Disabled
//          0x01 = Enabled
// $EF47E0: [Sonic the Hedgehog (Genesis), S3&K] [8-bit]
//          Stage Select Active = 01
// $EF47E1: [Sonic the Hedgehog (Genesis), 3] [8-bit]
//          Slow / Single Frame Step Mode Active = 01
// $EF47E2: Sonic 3 & Knuckles: Debug Mode (8-bit)
//          active - 0x01
// $EF47EA: Sonic 3 & Knuckles: Competition Mode current Character(8-bit)
//          Sonic - 0x00
//          Tails - 0x01
//          Knuckles - 0x02
// $EF47F1: [Sonic the Hedgehog (Genesis), 2, 3] [8-bit]
//          0x00 = Not Demo
//          0x01 = Demo
// $1EC6818: [Any Genesis Game] PS2 Pause Menu State [8-bit]
//           0x00: Not Active
//           0x01: Fade In (Unused)
//           0x02: Active
//           0x03: Fade Out
//           0x05: In Sub-Menu
// $1EC6820: [Any Genesis Game] PS2 Pause Menu Option [8-bit] (See options at 0x1ec69e0)
// $1EC6828: [Any Genesis Game] PS2 Pause Menu Option [8-bit] (See options at 0x1ec69e0)
// $1EC69D8: [Any Game Gear Game] PS2 Pause Menu State [8-bit] (see 0x1ec6818 for options)
// $1EC69E0: [Sonic 1 GG, maybe others] PS2 Pause Menu Option [8-bit]
//           0x00: Resume
//           0x01: Game Title
//           0x02: Save Game Data
//           0x03: Load Game Data
//           0x04: Controller Configuration
//           0x05: View Hints
//           0x06: Exit
// $1EC69E8: [Sonic 1 GG, maybe others] PS2 Pause Menu Option [8-bit] (duplicate of 0x1ec69e0)
// $1EC7A8C: PS2 Pause Menu: Mega Drive (8-bit)
//           Load Saves - 0x02
//           Save Select - 0x03
//           Creating Save File - 0x04
//           Loading Save File - 0x05
//           Save File created - 0x06
//           Save File loaded & Memory Card Format Prompt - 0x07
//           Load Prompt - 0x08
//           Formatting - 0x09
//           no load - 0x0c
//           Save Game Exit - 0x10
//           Load Game Exit - 0x11
//           Save File overwrite - 0x12
//           Overwrite done - 0x13
// $1EC7C4C: PS2 Pause Menu: Game Gear (8-bit)
//           Load Saves - 0x02
//           Save Select - 0x03
//           Creating Save File - 0x04
//           Loading Save File - 0x05
//           Save File created - 0x06
//           Save File loaded & Memory Card Format Prompt - 0x07
//           Load Prompt - 0x08
//           Formatting - 0x09
//           no load - 0x0c
//           Save Game Exit - 0x10
//           Load Game Exit - 0x11
//           Save File overwrite - 0x12
//           Overwrite done - 0x13
// $1FDA5F0: [Sonic Mega Collection Plus] [8-bits]
//           Screen Indicator
//           0x03 = In a Genesis Game
//           0x04 = In a Game Gear Game
// $1FDA628: [Sonic Mega Collection Plus] [8-bits]
//           Game Indicator
//           0x00 = Sonic the Hedgehog (Genesis)
//           0x01 = Sonic the Hedgehog 2
//           0x02 = Sonic the Hedgehog 3
//           0x03 = Sonic & Knuckles
//           0x04 = Blue Sphere
//           0x05 = Knuckles in Sonic 2
//           0x06 = Sonic 3 & Knuckles
//           0x07 = Sonic 3D Blast
//           0x08 = Sonic Spinball
//           0x09 = Dr. Robotnik's Mean Bean Machine (Genesis)
//           0x0a = Flicky
//           0x0b = Ristar
//           0x0c = The Ooze
//           0x0d = Comix Zone
//           0x0e = Sonic the Hedgehog (Game Gear)
//           0x0f = Sonic Labyrinth
//           0x10 = Sonic Drift
//           0x11 = Sonic Chaos
//           0x12 = Sonic Blast
//           0x13 = Dr. Robotnik's Mean Bean Machine (Game Gear)
// $1FFA690: [32-bit] Controller configuration - 1P
// $1FFA694: [32-bit] Controller configuration - 2P
// $1FFA6F0: [Games menu] times sonic 1 has been started
// $1FFA6F4: [Games menu] times sonic 2 has been started
// $1FFA6F8: [Games menu] times sonic 3 has been started
// $1FFA6FC: [Games menu] times sonic & knuckles has been started
// $1FFA700: [Games menu] times blue sphere has been started
// $1FFA704: [Games menu] times knuckles in sonic 2 has been started
// $1FFA708: [Games menu] times sonic 3 & knuckles has been started
// $1FFA70C: [Games menu] times sonic 3d blast has been started
// $1FFA710: [Games menu] times sonic spinball has been started
// $1FFA714: [Games menu] times bean machine has been started
// $1FFA718: [Games menu] times flicky has been started
// $1FFA71C: [Games menu] times ristar has been started
// $1FFA720: [Games menu] times the ooze has been started
// $1FFA724: [Games menu] times comix zone has been started
// $1FFA728: [Games menu] times sonic 1 8-bit has been started
// $1FFA72C: [Games menu] times sonic labyrinth has been started
// $1FFA730: [Games menu] times sonic drift has been started
// $1FFA734: [Games menu] times sonic chaos has been started
// $1FFA738: [Games menu] times sonic blast has been started
// $1FFA73C: [Games menu] times bean machine 8-bit has been started
// $1FFA750: [game list] blue sphere
//           0x00 - locked
//           0x01 - unlocked
// $1FFA754: [game list] knuckles in sonic 2
//           0x00 - locked
//           0x01 - unlocked
// $1FFA758: [game list] sonic 3 & knuckles
//           0x00 - locked
//           0x01 - unlocked
// $1FFA768: [game list] flicky
//           0x00 - locked
//           0x01 - unlocked
// $1FFA76C: [game list] ristar
//           0x00 - locked
//           0x01 - unlocked
// $1FFA770: [game list] the ooze
//           0x00 - locked
//           0x01 - unlocked
// $1FFA774: [game list] comix zone
//           0x00 - locked
//           0x01 - unlocked

smcp_pause_menu = byte(0x1ec6818)

smcp_load_save = byte(0x1ec7a8c) == 5

controller_config = dword(0x1ffa690)

button_input_1 = 0x45269d
button_input_2 = 0x45269c

in_genesis_game = byte(0x1fda5f0) == 3

in_sk = byte(0x1fda628) == 3

screen = byte(0xef3e00)

music = byte(0x307ec4)

game_paused = byte(0xef3e3b) == 1

level_select_active = byte(0xef47e0) == 1
level_select_inactive = byte(0xef47e0) == 0

character = byte(0xef470b)

zone = byte(0xef364e)
zone_act = word(0xef364e)

mushroom_hill = 7
flying_battery = 4
sandopolis = 8
lava_reef = 9
// lava_reef_2_boss = 0x16
sky_sanctuary = 0xa
death_egg = 0xb
death_egg_2_boss = 0x17
doomsday = 0xc
credits = 0xd
glowing_spheres_bonus = 0x14

mushroom_hill_1 = 0x0007
mushroom_hill_2 = 0x0107
flying_battery_1 = 0x0004
flying_battery_2 = 0x0104
sandopolis_1 = 0x0008
sandopolis_2 = 0x0108
lava_reef_1 = 0x0009
lava_reef_2 = 0x0109
lava_reef_2_boss = 0x0016
hidden_palace = 0x0116
sky_sanctuary_sonic = 0x000a
sky_sanctuary_knuckles = 0x010a
death_egg_1 = 0x000b
death_egg_2 = 0x010b
// death_egg_2_boss = 0x0017
// doomsday = 0x000c
// credits = 0x010d
// glowing_spheres_bonus = 0x0014

act = byte(0xef364f)

act_clear_alt = byte(0xef461e)

rings = word_be(0xef4620)

lives = byte(0xef4612)

monitor_count = word_be(0xef46cc)

x_position = word_be(0xeef810)
y_position = word_be(0xeef814)

mh1_life_1 = 0xef3438
mh1_life_2 = 0xef350f
mh2_life = 0xef34e4
fb1_life_1 = 0xef33ad
fb1_life_2 = 0xef3437
fb2_life = 0xef338f
sp1_life_k = 0xef3366
sp2_life = 0xef3401
lr1_life_1 = 0xef339b
lr1_life_2 = 0xef33be
lr1_life_3 = 0xef347b
lr1_life_4 = 0xef33ed
ss_life_1 = 0xef339c
ss_life_2 = 0xef333e
de2_life_1 = 0xef33b6
de2_life_2 = 0xef340b

function get_life_monitor(param) => prev(byte(param)) == 0x80 && byte(param) == 0x81

emeralds = byte(0xef47b0)
all_emeralds = emeralds == 7

green_emerald = 0xef47b2
orange_emerald = 0xef47b3
purple_emerald = 0xef47b4
blue_emerald = 0xef47b5
white_emerald = 0xef47b6
red_emerald = 0xef47b7
cyan_emerald = 0xef47b8

function get_emerald(param) => prev(byte(param)) == 0 && byte(param) == 1

super = byte(0xef4619) == 1

minutes = byte(0xef4623)
seconds = byte(0xef4624)

minutes_and_seconds = word_be(0xef4623)

score = word_be(0xef4628) * 10

//knuckles_ss_boss_health = byte(0xeefa79)

//
//
//

smcp_not_paused = smcp_pause_menu == 0

controller_config_1 = controller_config == 0
controller_config_2 = controller_config == 1
controller_config_3 = controller_config == 2

x_button_input = bit6(button_input_1) == 0
circle_button_input = bit5(button_input_1) == 0
square_button_input = bit7(button_input_1) == 0
L2_button_input = bit0(button_input_1) == 0

title_screen = screen == 4
screen_transition = screen == 0x8c
in_game = screen == 0xc
in_special_stage = screen == 0x34
special_stage_results = screen == 0x48
level_select_screen = screen == 0x28
start_game_from_title = prev(screen) == 4 && screen_transition
start_game_from_level_select = prev(screen) == 0x28 && screen_transition

clear_act = prev(music) != 0x8d && music == 0x8d
prev_doomsday_music = prev(music) == 0x7e
credits_music = music == 0x97

character_sonic = character == 1
character_knuckles = character == 3

no_ring_gain = rings == prev(rings)

gain_life = lives > prev(lives)
lose_life = lives < prev(lives)

monitor_count_up = monitor_count > prev(monitor_count)

centisecs = (minutes * 6000) + (seconds * 100) + byte(0xef4625)

clear_mh1 = in_game && zone_act == mushroom_hill_1 && clear_act
clear_mh2 = in_game && zone_act == mushroom_hill_2 && clear_act
clear_fb1 = in_game && zone_act == flying_battery_1 && clear_act
clear_fb2 = in_game && zone_act == flying_battery_2 && clear_act
clear_sp1 = in_game && zone_act == sandopolis_1 && clear_act
clear_sp2 = in_game && zone_act == sandopolis_2 && clear_act
clear_lr1 = in_game && zone_act == lava_reef_1 && clear_act
clear_lr2_sonic = character_sonic && in_game && zone_act == lava_reef_2_boss && clear_act
clear_lr2_knuckles = character_knuckles && screen_transition && prev(zone_act) == lava_reef_2 && zone_act == hidden_palace
clear_hp = screen_transition && prev(zone_act) == hidden_palace && zone == sky_sanctuary
clear_ss_sonic = character_sonic && in_game && zone_act == sky_sanctuary_sonic && clear_act
clear_ss_knuckles = character_knuckles && in_game && zone_act == sky_sanctuary_knuckles && prev_doomsday_music && prev(act_clear_alt) == 1 && act_clear_alt == 0
clear_de1 = character_sonic && in_game && zone_act == death_egg_1 && clear_act
clear_de2 = character_sonic && screen_transition && prev(zone) == death_egg_2_boss && __ornext(zone == doomsday || zone == credits)
clear_doomsday = character_sonic && screen_transition && prev(zone) == doomsday && zone == credits
clear_game_sonic = character_sonic && screen_transition && __ornext(prev(zone) == death_egg_2_boss || prev(zone) == doomsday) && zone == credits

clear_mh1_trigger = in_game && zone_act == mushroom_hill_1 && trigger_when(clear_act)
clear_fb1_trigger = in_game && zone_act == flying_battery_1 && trigger_when(clear_act)
clear_sp1_trigger = in_game && zone_act == sandopolis_1 && trigger_when(clear_act)
clear_lr1_trigger = in_game && zone_act == lava_reef_1 && trigger_when(clear_act)
clear_ss_sonic_trigger = character_sonic && in_game && zone_act == sky_sanctuary_sonic && trigger_when(clear_act)
clear_de1_trigger = character_sonic && in_game && zone_act == death_egg_1 && trigger_when(clear_act)

slow_mode_protection_config_1 =
    __ornext(x_button_input || circle_button_input) &&
    controller_config_1 &&
    smcp_not_paused &&
    level_select_active &&
    game_paused

slow_mode_protection_config_2 =
    __ornext(circle_button_input || square_button_input) &&
    controller_config_2 &&
    smcp_not_paused &&
    level_select_active &&
    game_paused

slow_mode_protection_config_3 =
    __ornext(L2_button_input || x_button_input) &&
    controller_config_3 &&
    smcp_not_paused &&
    level_select_active &&
    game_paused

slow_mode_protection =
    disable_when(
        slow_mode_protection_config_1
        // until =
        //     title_screen ||
        //     !in_genesis_game
    ) &&
    disable_when(
        slow_mode_protection_config_2
        // until =
        //     title_screen ||
        //     !in_genesis_game
    ) &&
    disable_when(
        slow_mode_protection_config_3
        // until =
        //     title_screen ||
        //     !in_genesis_game
    )

slow_mode_protection_leaderboard =
    slow_mode_protection_config_1 || 
    slow_mode_protection_config_2 ||
    slow_mode_protection_config_3

smcp_load_save_protection =
    disable_when(
        smcp_load_save
        // until =
        //     title_screen ||
        //     !in_genesis_game
    )

level_select_protection =
    disable_when(
        in_genesis_game &&
        in_sk &&
        level_select_active
        // until =
        //     title_screen ||
        //     !in_genesis_game
    )

super_protection =
    disable_when(
        super
        // until =
        //     title_screen ||
        //     !in_genesis_game
    )

mh1_life_monitors =
    measured(
        tally(2,
            zone_act == mushroom_hill_1 &&
            get_life_monitor(mh1_life_1),
            zone_act == mushroom_hill_1 &&
            get_life_monitor(mh1_life_2)
        )
    ) &&
    never(lose_life)

mh2_life_monitors =
    zone_act == mushroom_hill_2 &&
    get_life_monitor(mh2_life)

fb1_life_monitors =
    measured(
        tally(2,
            zone_act == flying_battery_1 &&
            get_life_monitor(fb1_life_1),
            zone_act == flying_battery_1 &&
            get_life_monitor(fb1_life_2)
        )
    ) &&
    never(lose_life)

fb2_life_monitors =
    zone_act == flying_battery_2 &&
    get_life_monitor(fb2_life)

sp1_life_monitors =
    zone_act == sandopolis_1 &&
    get_life_monitor(sp1_life_k)

sp2_life_monitors =
    zone_act == sandopolis_2 &&
    get_life_monitor(sp2_life)

lr1_life_monitors =
    character_sonic &&
    measured(
        tally(4,
            zone_act == lava_reef_1 &&
            get_life_monitor(lr1_life_1),
            zone_act == lava_reef_1 &&
            get_life_monitor(lr1_life_2),
            zone_act == lava_reef_1 &&
            get_life_monitor(lr1_life_3),
            zone_act == lava_reef_1 &&
            get_life_monitor(lr1_life_4)
        )
    ) &&
    never(lose_life)

ss_sonic_life_monitors =
    character_sonic &&
    measured(
        tally(2,
            zone_act == sky_sanctuary_sonic &&
            get_life_monitor(ss_life_1),
            zone_act == sky_sanctuary_sonic &&
            get_life_monitor(ss_life_2)
        )
    ) &&
    never(lose_life)

de2_life_monitors =
    character_sonic &&
    measured(
        tally(2,
            zone_act == death_egg_2 &&
            get_life_monitor(de2_life_1),
            zone_act == death_egg_2 &&
            get_life_monitor(de2_life_2)
        )
    ) && 
    never(lose_life)

//knuckles_beat_ss = in_game && character_knuckles && zone == sky_sanctuary && act == 1 && prev_doomsday_music && prev(knuckles_ss_boss_health) == 1 && knuckles_ss_boss_health == 0

//
//
//

character_dict = {
    1: "Sonic",
    3: "Knuckles"
}

zone_dict = {
    0x0007: "Mushroom Hill Zone Act 1",
    0x0107: "Mushroom Hill Zone Act 2",
    0x0004: "Flying Battery Zone Act 1",
    0x0104: "Flying Battery Zone Act 2",
    0x0008: "Sandopolis Zone Act 1",
    0x0108: "Sandopolis Zone Act 2",
    0x0009: "Lava Reef Zone Act 1",
    0x0109: "Lava Reef Zone Act 2",
    0x0016: "Lava Reef Zone Act 2",
    0x0116: "Hidden Palace Zone",
    0x000a: "Sky Sanctuary Zone",
    0x010a: "Sky Sanctuary Zone",
    0x000b: "Death Egg Zone Act 1",
    0x010b: "Death Egg Zone Act 2",
    0x0017: "Death Egg Zone Act 2",
    0x000c: "The Doomsday Zone",
    0x0014: "the Glowing Spheres Bonus Stage",
    0x0015: "the Slot Machine Bonus Stage"
}

// ------------
// Achievements
// ------------

zone_clear_logic = {
    "mh": (clear_mh2),
    "fb": (clear_fb2),
    "sp": (clear_sp2),
    "ss_sonic": (clear_ss_sonic),
    "ss_knuckles": (clear_ss_knuckles),
    "de": (clear_de2),
    "doomsday": (all_emeralds && clear_doomsday),
    "ss_knuckles_all_emeralds": (all_emeralds && clear_ss_knuckles)
}

function achievement_progress(id, title, description, points, type, zone_param) {
    achievement(
        id = id,
        title = title,
        description = description,
        points = points,
        type = type,
        trigger =
            once(
                in_genesis_game &&
                in_sk &&
                level_select_inactive &&
                zone_act == mushroom_hill_1 &&
                start_game_from_title
            ) &&
            zone_clear_logic[zone_param] &&
            level_select_protection &&
            smcp_load_save_protection &&
            (
                (
                    always_false()
                ) ||
                (
                    never(title_screen) &&
                    never(!in_genesis_game)
                )
            )
    )
}

achievement_progress(370999, "Fungal Fun", "[S&K] Clear Mushroom Hill Zone Act 2 (No level select and no loading saves)", 5, "PROGRESSION", "mh")
achievement_progress(371000, "Airship Assault", "[S&K] Clear Flying Battery Zone Act 2 (No level select and no loading saves)", 5, "PROGRESSION", "fb")
achievement_progress(371001, "Pyramid Peril", "[S&K] Clear Sandopolis Zone Act 2 (No level select and no loading saves)", 5, "PROGRESSION", "sp")

// Separated into its own achievement to manage the alt groups
achievement(
    id = 371002,
    title = "Volcano Vibes",
    description = "[S&K] Clear Lava Reef Zone Act 2 (No level select and no loading saves)",
    points = 5,
    type = "PROGRESSION",
    trigger =
        once(
            in_genesis_game &&
            in_sk &&
            level_select_inactive &&
            zone_act == mushroom_hill_1 &&
            start_game_from_title
        ) &&
        level_select_protection &&
        smcp_load_save_protection &&
        (
            (
                clear_lr2_sonic
            ) ||
            (
                clear_lr2_knuckles
            ) ||
            (
                always_false() &&
                never(title_screen) &&
                never(!in_genesis_game)
            )
        )
)

achievement_progress(371003, "Sonic in the Sky", "[S&K] Clear Sky Sanctuary Zone as Sonic (No level select and no loading saves)", 5, "", "ss_sonic")
achievement_progress(371004, "I Gotta Protect This Place...", "[S&K] Clear Sky Sanctuary Zone as Knuckles (No level select and no loading saves)", 5, "", "ss_knuckles")
achievement_progress(371005, "Orbital Onslaught", "[S&K] Clear Death Egg Zone Act 2 as Sonic (No level select and no loading saves)", 5, "", "de")

// This only exists for the sake of the progression system, since win conditions aren't possible to use in a compilation
achievement(
    id = 371006,
    title = "Robot Wreckage",
    description = "[S&K] Beat the game as either character (No level select and no loading saves)",
    points = 10,
    type = "PROGRESSION",
    trigger =
        once(
            in_genesis_game &&
            in_sk &&
            level_select_inactive &&
            zone_act == mushroom_hill_1 &&
            start_game_from_title
        ) &&
        level_select_protection &&
        smcp_load_save_protection &&
        (
            (
                clear_de2
            ) ||
            (
                clear_ss_knuckles
            ) ||
            (
                always_false() &&
                never(title_screen) &&
                never(!in_genesis_game)
            )
        )
)

function achievement_emerald(id, title, description, points, emerald_param) {
    achievement(
        id = id,
        title = title,
        description = description,
        points = points,
        trigger =
            once(
                in_genesis_game &&
                in_sk &&
                level_select_inactive &&
                zone_act == mushroom_hill_1 &&
                start_game_from_title
            ) &&
            special_stage_results &&
            get_emerald(emerald_param) &&
            level_select_protection &&
            smcp_load_save_protection &&
            (
                (
                    always_false()
                ) ||
                (
                    never(title_screen) &&
                    never(!in_genesis_game)
                )
            )
    )
}

achievement_emerald(371007, "Green Get!", "[S&K] Get the Green Chaos Emerald (No level select and no loading saves)", 5, green_emerald)
achievement_emerald(371008, "Orange Get!", "[S&K] Get the Orange Chaos Emerald (No level select and no loading saves)", 5, orange_emerald)
achievement_emerald(371009, "Purple Get!", "[S&K] Get the Purple Chaos Emerald (No level select and no loading saves)", 5, purple_emerald)
achievement_emerald(371010, "Blue Get!", "[S&K] Get the Blue Chaos Emerald (No level select and no loading saves)", 5, blue_emerald)
achievement_emerald(371011, "White Get!", "[S&K] Get the White Chaos Emerald (No level select and no loading saves)", 5, white_emerald)
achievement_emerald(371012, "Red Get!", "[S&K] Get the Red Chaos Emerald (No level select and no loading saves)", 5, red_emerald)
achievement_emerald(371013, "Cyan Get!", "[S&K] Get the Cyan Chaos Emerald (No level select and no loading saves)", 5, cyan_emerald)

achievement_progress(371014, "Peace on Angel Island", "Clear the Doomsday Zone as Sonic with all 7 Chaos Emeralds (No level select and no loading saves)", 25, "", "doomsday")
achievement_progress(371015, "Rivals to Friends", "Clear Sky Sanctuary Zone as Knuckles with all 7 Chaos Emeralds (No level select and no loading saves)", 25, "", "ss_knuckles_all_emeralds")

achievement(
    id = 371016,
    title = "Bonus Ascent",
    description = "[S&K] Reach the top of the Glowing Spheres Bonus Stage (Level select allowed, but no slow mode/frame step and no loading saves)",
    points = 5,
    trigger =
        in_sk &&
        screen_transition &&
        y_position >= 0xf000 &&
        prev(zone) == glowing_spheres_bonus &&
        zone != glowing_spheres_bonus &&
        slow_mode_protection &&
        smcp_load_save_protection &&
        (
            (
                always_false()
            ) ||
            (
                never(title_screen) &&
                never(!in_genesis_game)
            )
        )
)

life_monitor_logic = {
    "mh1": mh1_life_monitors,
    "mh2": mh2_life_monitors,
    "fb1": fb1_life_monitors,
    "fb2": fb2_life_monitors,
    "sp1": sp1_life_monitors,
    "sp2": sp2_life_monitors,
    "lr1": lr1_life_monitors,
    "ss_sonic": ss_sonic_life_monitors,
    "de2": de2_life_monitors
}

// life_monitor_logic = {
//     "mh1": (measured(tally(2, zone_act == mushroom_hill_1 && get_life_monitor(mh1_life_1), zone_act == mushroom_hill_1 && get_life_monitor(mh1_life_2))) && never(lose_life)),
//     "mh2": (zone_act == mushroom_hill_2 && get_life_monitor(mh2_life)),
//     "fb1": (measured(tally(2, zone_act == flying_battery_1 && get_life_monitor(fb1_life_1), zone_act == flying_battery_1 && get_life_monitor(fb1_life_2))) && never(lose_life)),
//     "fb2": (zone_act == flying_battery_2 && get_life_monitor(fb2_life)),
//     "sp1": (zone_act == sandopolis_1 && get_life_monitor(sp1_life_k)),
//     "sp2": (zone_act == sandopolis_2 && get_life_monitor(sp2_life)),
//     "lr1": (character_sonic && measured(tally(4, zone_act == lava_reef_1 && get_life_monitor(lr1_life_1), zone_act == lava_reef_1 && get_life_monitor(lr1_life_2), zone_act == lava_reef_1 && get_life_monitor(lr1_life_3), zone_act == lava_reef_1 && get_life_monitor(lr1_life_4))) && never(lose_life)),
//     "ss_sonic": (character_sonic && measured(tally(2, zone_act == sky_sanctuary_sonic && get_life_monitor(ss_life_1), zone_act == sky_sanctuary_sonic && get_life_monitor(ss_life_2))) && never(lose_life)),
//     "de2": (character_sonic && measured(tally(2, zone_act == death_egg_2 && get_life_monitor(de2_life_1), zone_act == death_egg_2 && get_life_monitor(de2_life_2))) && never(lose_life)),
// }

function achievement_life_monitors(id, title, description, points, zone_param) {
    achievement(
        id = id,
        title = title,
        description = description,
        points = points,
        trigger =
            in_sk &&
            in_game &&
            life_monitor_logic[zone_param] &&
            slow_mode_protection &&
            smcp_load_save_protection &&
            (
                (
                    always_false()
                ) ||
                (
                    never(title_screen) &&
                    never(!in_genesis_game)
                )
            )
    )
}

achievement_life_monitors(371017, "Fungal Life I", "[S&K] Get 2 Life Monitors in Mushroom Hill Zone Act 1 without dying (Level select allowed, but no slow mode/frame step and no loading saves)", 5, "mh1")
achievement_life_monitors(371018, "Fungal Life II", "[S&K] Get 1 Life Monitor in Mushroom Hill Zone Act 2 (Level select allowed, but no slow mode/frame step and no loading saves)", 3, "mh2")
achievement_life_monitors(371019, "Spare Batteries I", "[S&K] Get 2 Life Monitors in Flying Battery Zone Act 1 without dying (Level select allowed, but no slow mode/frame step and no loading saves)", 5, "fb1")
achievement_life_monitors(371020, "Spare Batteries II", "[S&K] Get 1 Life Monitor in Flying Battery Zone Act 2 (Level select allowed, but no slow mode/frame step and no loading saves)", 3, "fb2")
achievement_life_monitors(371021, "Secrets of the Pyramids Revealed I", "[S&K] Get 1 Life Monitor in Sandopolis Zone Act 1 (Level select allowed, but no slow mode/frame step and no loading saves)", 3, "sp1")
achievement_life_monitors(371022, "Secrets of the Pyramids Revealed II", "[S&K] Get 1 Life Monitor in Sandopolis Zone Act 2 (Level select allowed, but no slow mode/frame step and no loading saves)", 3, "sp2")
achievement_life_monitors(371023, "Life from the Ashes", "[S&K] Get 4 Life Monitors in Lava Reef Zone Act 1 as Sonic without dying (Level select allowed, but no slow mode/frame step and no loading saves)", 5, "lr1")
achievement_life_monitors(371024, "Sanctuary of Life", "[S&K] Get 2 Life Monitors in Sky Sanctuary Zone as Sonic without dying (Level select allowed, but no slow mode/frame step and no loading saves)", 5, "ss_sonic")
achievement_life_monitors(371025, "Life or Death", "[S&K] Get 2 Life Monitors in Death Egg Zone Act 2 as Sonic without dying (Level select allowed, but no slow mode/frame step and no loading saves)", 5, "de2")

speedrun_logic = {
    "mh1": (clear_mh1_trigger && minutes_and_seconds < 0x0114),
    "fb1": (clear_fb1_trigger && minutes_and_seconds < 0x0314),
    "sp1": (clear_sp1_trigger && minutes_and_seconds < 0x031e),
    "lr1": (clear_lr1_trigger && minutes_and_seconds < 0x0328),
    "ss_sonic": (clear_ss_sonic_trigger && minutes_and_seconds < 0x031e),
    "de1": (clear_de1_trigger && minutes_and_seconds < 0x031e)
}

// 1min20sec = 0x0114
// 3min20sec = 0x0314
// 3min30sec = 0x031e
// 3min40sec = 0x0328

function achievement_speedrun(id, title, description, points, zone_param) {
    achievement(
        id = id,
        title = title,
        description = description,
        points = points,
        trigger =
            in_sk &&
            character_sonic &&
            speedrun_logic[zone_param] &&
            disable_when(super) &&
            slow_mode_protection &&
            smcp_load_save_protection &&
            (
                (
                    always_false()
                ) ||
                (
                    never(title_screen) &&
                    never(!in_genesis_game)
                )
            )
    )
}

achievement_speedrun(371026, "Mushroom Run", "[S&K] Clear Mushroom Hill Zone Act 1 as Sonic in under 1min20sec without going Super (Level select allowed, but no slow mode/frame step and no loading saves)", 5, "mh1")
achievement_speedrun(371027, "Battery Blitz", "[S&K] Clear Flying Battery Zone Act 1 as Sonic in under 3min20sec without going Super (Level select allowed, but no slow mode/frame step and no loading saves)", 5, "fb1")
achievement_speedrun(371028, "Dry Run", "[S&K] Clear Sandopolis Zone Act 1 as Sonic in under 3min30sec without going Super (Level select allowed, but no slow mode/frame step and no loading saves)", 5, "sp1")
achievement_speedrun(371029, "Running on Lava", "[S&K] Clear Lava Reef Zone Act 1 as Sonic in under 3min40sec without going Super (Level select allowed, but no slow mode/frame step and no loading saves)", 5, "lr1")
achievement_speedrun(371030, "Cloud Runner", "[S&K] Clear Sky Sanctuary Zone as Sonic in under 3min30sec without going Super (Level select allowed, but no slow mode/frame step and no loading saves)", 5, "ss_sonic")
achievement_speedrun(371031, "Death Egg Dash", "[S&K] Clear Death Egg Zone Act 1 as Sonic in under 3min30sec without going Super (Level select allowed, but no slow mode/frame step and no loading saves)", 5, "de1")

// ------------
// Leaderboards
// ------------

leaderboard(
    id = 82481,
    title = "[S&K] High Score: Sonic",
    description = "Submits at game over or after beating the game. No slow mode/frame step and no loading saves",
    start =
        in_sk &&
        character_sonic &&
        score > 0 &&
        smcp_load_save_protection &&
        slow_mode_protection &&
        (
            (
                in_game &&
                prev(lives) == 1 &&
                lives == 0
            ) ||
            (
                clear_game_sonic
            ) ||
            (
                always_false() &&
                never(title_screen) &&
                never(!in_genesis_game)
            )
        ),
    cancel = always_false(),
    submit = always_true(),
    value = measured(score),
    format = "VALUE"
)

leaderboard(
    id = 82482,
    title = "[S&K] High Score: Knuckles",
    description = "Submits at game over or after beating the game. No slow mode/frame step and no loading saves",
    start =
        in_sk &&
        character_knuckles &&
        score > 0 &&
        smcp_load_save_protection &&
        slow_mode_protection &&
        (
            (
                in_game &&
                prev(lives) == 1 &&
                lives == 0
            ) ||
            (
                clear_ss_knuckles
            ) ||
            (
                always_false() &&
                never(title_screen) &&
                never(!in_genesis_game)
            )
        ),
    cancel = always_false(),
    submit = always_true(),
    value = measured(score),
    format = "VALUE"
)

leaderboard_start_logic = {
    "mh1_sonic": (character_sonic && zone_act == mushroom_hill_1 && (always_false() || start_game_from_title || start_game_from_level_select)),
    "mh1_knuckles": (character_knuckles && zone_act == mushroom_hill_1 && (always_false() || start_game_from_title || start_game_from_level_select)),
    "mh2_sonic": (character_sonic && zone_act == mushroom_hill_2 && (always_false() || in_game && prev(zone_act) == mushroom_hill_1 || start_game_from_level_select)),
    "mh2_knuckles": (character_knuckles && zone_act == mushroom_hill_2 && (always_false() || in_game && prev(zone_act) == mushroom_hill_1 || start_game_from_level_select)),
    "fb1_sonic": (character_sonic && zone_act == flying_battery_1 && (always_false() || screen_transition && prev(zone_act) == mushroom_hill_2 || start_game_from_level_select)),
    "fb1_knuckles": (character_knuckles && zone_act == flying_battery_1 && (always_false() || screen_transition && prev(zone_act) == mushroom_hill_2 || start_game_from_level_select)),
    "fb2_sonic": (character_sonic && zone_act == flying_battery_2 && (always_false() || in_game && prev(zone_act) == flying_battery_1 || start_game_from_level_select)),
    "fb2_knuckles": (character_knuckles && zone_act == flying_battery_2 && (always_false() || in_game && prev(zone_act) == flying_battery_1 || start_game_from_level_select)),
    "sp1_sonic": (character_sonic && zone_act == sandopolis_1 && (always_false() || screen_transition && prev(zone_act) == flying_battery_2 || start_game_from_level_select)),
    "sp1_knuckles": (character_knuckles && zone_act == sandopolis_1 && (always_false() || screen_transition && prev(zone_act) == flying_battery_2 || start_game_from_level_select)),
    "sp2_sonic": (character_sonic && zone_act == sandopolis_2 && (always_false() || in_game && prev(zone_act) == sandopolis_1 || start_game_from_level_select)),
    "sp2_knuckles": (character_knuckles && zone_act == sandopolis_2 && (always_false() || in_game && prev(zone_act) == sandopolis_1 || start_game_from_level_select)),
    "lr1_sonic": (character_sonic && zone_act == lava_reef_1 && (always_false() || screen_transition && prev(zone_act) == sandopolis_2 || start_game_from_level_select)),
    "lr1_knuckles": (character_knuckles && zone_act == lava_reef_1 && (always_false() || screen_transition && prev(zone_act) == sandopolis_2 || start_game_from_level_select)),
    "lr2_sonic": (character_sonic && zone_act == lava_reef_2 && (always_false() || in_game && prev(zone_act) == lava_reef_1 || start_game_from_level_select)),
    "lr2_knuckles": (character_knuckles && zone_act == lava_reef_2 && (always_false() || in_game && prev(zone_act) == lava_reef_1 || start_game_from_level_select)),
    "hp_sonic": (character_sonic && zone_act == hidden_palace && (always_false() || screen_transition && prev(zone_act) == lava_reef_2_boss || start_game_from_level_select)),
    "hp_knuckles": (character_knuckles && zone_act == hidden_palace && (always_false() || screen_transition && prev(zone_act) == lava_reef_2 || start_game_from_level_select)),
    "ss_sonic": (character_sonic && zone_act == sky_sanctuary_sonic && (always_false() || screen_transition && prev(zone_act) == hidden_palace || start_game_from_level_select)),
    "ss_knuckles": (character_knuckles && zone_act == sky_sanctuary_knuckles && (always_false() || screen_transition && prev(zone_act) == hidden_palace || start_game_from_level_select)),
    "de1": (character_sonic && zone_act == death_egg_1 && (always_false() || screen_transition && prev(zone_act) == sky_sanctuary_sonic || start_game_from_level_select)),
    "de2": (character_sonic && zone_act == death_egg_2 && (always_false() || in_game && prev(zone_act) == death_egg_1 || start_game_from_level_select)),
    "doomsday": (character_sonic && zone == doomsday && (always_false() || screen_transition && prev(zone) == death_egg_2_boss || start_game_from_level_select))
}

leaderboard_submit_logic = {
    "mh1_sonic": (character_sonic && clear_mh1),
    "mh1_knuckles": (character_knuckles && clear_mh1),
    "mh2_sonic": (character_sonic && clear_mh2),
    "mh2_knuckles": (character_knuckles && clear_mh2),
    "fb1_sonic": (character_sonic && clear_fb1),
    "fb1_knuckles": (character_knuckles && clear_fb1),
    "fb2_sonic": (character_sonic && clear_fb2),
    "fb2_knuckles": (character_knuckles && clear_fb2),
    "sp1_sonic": (character_sonic && clear_sp1),
    "sp1_knuckles": (character_knuckles && clear_sp1),
    "sp2_sonic": (character_sonic && clear_sp2),
    "sp2_knuckles": (character_knuckles && clear_sp2),
    "lr1_sonic": (character_sonic && clear_lr1),
    "lr1_knuckles": (character_knuckles && clear_lr1),
    "lr2_sonic": (clear_lr2_sonic),
    "lr2_knuckles": (clear_lr2_knuckles),
    "hp_sonic": (character_sonic && clear_hp),
    "hp_knuckles": (character_knuckles && clear_hp),
    "ss_sonic": (clear_ss_sonic),
    "ss_knuckles": (clear_ss_knuckles),
    "de1": (clear_de1),
    "de2": (clear_de2),
    "doomsday": (clear_doomsday)
}

function leaderboard_speedrun_game(id, title_param, description_param, start_param, cancel_param, submit_param) {
    leaderboard(
        id = id,
        title =
            format(
                "[S&K] Full Game Speedrun: {0}",
                title_param
            ),
        description = description_param,
        start =
            in_genesis_game &&
            in_sk &&
            leaderboard_start_logic[start_param],
        cancel =
            cancel_param ||
            smcp_load_save ||
            slow_mode_protection_leaderboard ||
            title_screen ||
            !in_genesis_game,
        submit =
            in_genesis_game &&
            in_sk &&
            submit_param,
        value = measured(always_true()),
        format = "FRAMES",
        lower_is_better = true
    )
}

leaderboard_speedrun_game(
    94359,
    "Sonic",
    "Submits after beating the game with fewer than 7 Chaos Emeralds. No slow mode/frame step and no loading saves",
    "mh1_sonic",
    all_emeralds && clear_doomsday,
    emeralds < 7 && character_sonic && screen_transition && prev(zone) == death_egg_2_boss && zone == credits
)

leaderboard_speedrun_game(
    94360,
    "Sonic, All Emeralds",
    "Submits after beating the game with all 7 Chaos Emeralds. No slow mode/frame step and no loading saves",
    "mh1_sonic",
    emeralds < 7 && character_sonic && screen_transition && prev(zone) == death_egg_2_boss && zone == credits,
    all_emeralds && clear_doomsday
)

leaderboard_speedrun_game(
    94361,
    "Knuckles",
    "Submits after beating the game with fewer than 7 Chaos Emeralds. No slow mode/frame step and no loading saves",
    "mh1_knuckles",
    all_emeralds && clear_ss_knuckles,
    emeralds < 7 && clear_ss_knuckles
)

leaderboard_speedrun_game(
    94362,
    "Knuckles, All Emeralds",
    "Submits after beating the game with all 7 Chaos Emeralds. No slow mode/frame step and no loading saves",
    "mh1_knuckles",
    emeralds < 7 && clear_ss_knuckles,
    all_emeralds && clear_ss_knuckles
)

function leaderboard_speedrun(id, title, zone_param) {
    leaderboard(
        id = id,
        title = title,
        description = "No Super transformation, no slow mode/frame step, and no loading saves",
        start =
            in_sk &&
            smcp_load_save_protection &&
            slow_mode_protection &&
            super_protection &&
            leaderboard_submit_logic[zone_param] &&
            (
                (
                    always_false()
                ) ||
                (
                    never(title_screen) &&
                    never(!in_genesis_game)
                )
            ),
        cancel = always_false(),
        submit = always_true(),
        value = measured(centisecs),
        format = "MILLISECS",
        lower_is_better = true
    )
}

leaderboard_speedrun(82483, "[S&K] Mushroom Hill 1 Speedrun: Sonic", "mh1_sonic")
leaderboard_speedrun(82484, "[S&K] Mushroom Hill 1 Speedrun: Knuckles", "mh1_knuckles")
leaderboard_speedrun(82485, "[S&K] Mushroom Hill 2 Speedrun: Sonic", "mh2_sonic")
leaderboard_speedrun(82486, "[S&K] Mushroom Hill 2 Speedrun: Knuckles", "mh2_knuckles")
leaderboard_speedrun(82487, "[S&K] Flying Battery 1 Speedrun: Sonic", "fb1_sonic")
leaderboard_speedrun(82488, "[S&K] Flying Battery 1 Speedrun: Knuckles", "fb1_knuckles")
leaderboard_speedrun(82489, "[S&K] Flying Battery 2 Speedrun: Sonic", "fb2_sonic")
leaderboard_speedrun(82490, "[S&K] Flying Battery 2 Speedrun: Knuckles", "fb2_knuckles")
leaderboard_speedrun(82491, "[S&K] Sandopolis 1 Speedrun: Sonic", "sp1_sonic")
leaderboard_speedrun(82492, "[S&K] Sandopolis 1 Speedrun: Knuckles", "sp1_knuckles")
leaderboard_speedrun(82493, "[S&K] Sandopolis 2 Speedrun: Sonic", "sp2_sonic")
leaderboard_speedrun(82494, "[S&K] Sandopolis 2 Speedrun: Knuckles", "sp2_knuckles")
leaderboard_speedrun(82495, "[S&K] Lava Reef 1 Speedrun: Sonic", "lr1_sonic")
leaderboard_speedrun(82496, "[S&K] Lava Reef 1 Speedrun: Knuckles", "lr1_knuckles")
leaderboard_speedrun(82497, "[S&K] Lava Reef 2 Speedrun: Sonic", "lr2_sonic")
leaderboard_speedrun(82498, "[S&K] Lava Reef 2 Speedrun: Knuckles", "lr2_knuckles")
leaderboard_speedrun(82499, "[S&K] Hidden Palace Speedrun: Sonic", "hp_sonic")
leaderboard_speedrun(82500, "[S&K] Hidden Palace Speedrun: Knuckles", "hp_knuckles")
leaderboard_speedrun(82501, "[S&K] Sky Sanctuary Speedrun: Sonic", "ss_sonic")
leaderboard_speedrun(82502, "[S&K] Sky Sanctuary Speedrun: Knuckles", "ss_knuckles")
leaderboard_speedrun(82503, "[S&K] Death Egg 1 Speedrun: Sonic", "de1")
leaderboard_speedrun(82504, "[S&K] Death Egg 2 Speedrun: Sonic", "de2")
//leaderboard_speedrun("[S&K] The Doomsday Speedrun", "doomsday")

// Needs separate cancel logic to allow Super
leaderboard(
    id = 82505,
    title = "[S&K] The Doomsday Speedrun: Sonic",
    description = "No slow mode/frame step and no loading saves",
    start =
        in_sk &&
        smcp_load_save_protection &&
        slow_mode_protection &&
        leaderboard_submit_logic["doomsday"] &&
        (
            (
                always_false()
            ) ||
            (
                never(title_screen) &&
                never(!in_genesis_game)
            )
        ),
    cancel = always_false(),
    submit = always_true(),
    value = measured(centisecs),
    format = "MILLISECS",
    lower_is_better = true
)

// -------------
// Rich Presence
// -------------

rich_presence_conditional_display(
    in_genesis_game && in_sk && level_select_screen,
    "[S&K] Sneaking around the Level Select screen"
)

rich_presence_conditional_display(
    in_genesis_game && in_sk && in_game && character_knuckles && zone_act == sky_sanctuary_knuckles && credits_music,
    "[S&K] Knuckles cleared the game! Lives: {0} | Emeralds: {1} | Score: {2}",
    rich_presence_value("Value", lives),
    rich_presence_value("Value", emeralds),
    rich_presence_value("Value", score)
)

rich_presence_conditional_display(
    in_genesis_game && in_sk && character_sonic && zone == credits,
    "[S&K] Sonic cleared the game! Lives: {0} | Emeralds: {1} | Score: {2}",
    rich_presence_value("Value", lives),
    rich_presence_value("Value", emeralds),
    rich_presence_value("Value", score)
)

rich_presence_conditional_display(
    in_genesis_game && in_sk && (in_special_stage || special_stage_results),
    "[S&K] {0} is in a Special Stage | Lives: {1} | Emeralds: {2} | Score: {3}",
    rich_presence_lookup("S&KCharacter", character, character_dict),
    rich_presence_value("Value", lives),
    rich_presence_value("Value", emeralds),
    rich_presence_value("Value", score)
)

rich_presence_conditional_display(
    in_genesis_game && in_sk && (in_game || screen_transition),
    "[S&K] {0} is in {1} | Lives: {2} | Emeralds: {3} | Score: {4}",
    rich_presence_lookup("S&KCharacter", character, character_dict),
    rich_presence_lookup("S&KZone", zone_act, zone_dict),
    rich_presence_value("Value", lives),
    rich_presence_value("Value", emeralds),
    rich_presence_value("Value", score)
)

rich_presence_conditional_display(
    in_genesis_game && in_sk,
    "Playing Sonic & Knuckles"
)

rich_presence_display(
    "[Temp] So many games, so little time."
)

// -------------
// Formerly Used
// -------------

// leaderboard(
//     id = 82481,
//     title = "[S&K] High Score: Sonic",
//     description = "Submits at Game Over or after beating the game. (Level Select Allowed, but No Slow Mode/Frame Step)",
//     start = in_genesis_game &&
//             in_sk &&
//             character_sonic &&
//             (always_false() ||
//              start_game_from_title ||
//              start_game_from_level_select),
//     cancel = smcp_load_save || slow_mode_protection_leaderboard || title_screen || !in_genesis_game,
//     submit = in_genesis_game &&
//              in_sk &&
//              character_sonic &&
//              score > 0 &&
//              (always_false() ||
//               (in_game && prev(lives) == 1 && lives == 0) ||
//               (clear_game_sonic)),
//     value = measured(score),
//     format = "VALUE"
// )

// leaderboard(
//     id = 82482,
//     title = "[S&K] High Score: Knuckles",
//     description = "Submits at Game Over or after beating the game. (Level Select Allowed, but No Slow Mode/Frame Step)",
//     start = in_genesis_game &&
//             in_sk &&
//             character_knuckles &&
//             (always_false() ||
//              start_game_from_title ||
//              start_game_from_level_select),
//     cancel = smcp_load_save || slow_mode_protection_leaderboard || title_screen || !in_genesis_game,
//     submit = in_genesis_game &&
//              in_sk &&
//              character_knuckles &&
//              score > 0 &&
//              (always_false() ||
//               (in_game && prev(lives) == 1 && lives == 0) ||
//               (clear_ss_knuckles)),
//     value = measured(score),
//     format = "VALUE"
// )

// function leaderboard_speedrun(id, title, zone_param) {
//     leaderboard(
//         id = id,
//         title = title,
//         description = "Super transformation and slow mode/frame step aren't allowed",
//         start = in_genesis_game &&
//                 in_sk &&
//                 leaderboard_start_logic[zone_param],
//         cancel = super || smcp_load_save || slow_mode_protection_leaderboard || title_screen || !in_genesis_game,
//         submit = in_genesis_game &&
//                  in_sk &&
//                  leaderboard_submit_logic[zone_param],
//         value = measured(centisecs),
//         format = "MILLISECS",
//         lower_is_better = true
//     )
// }